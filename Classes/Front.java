/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lab6;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.plaf.TabbedPaneUI;
import lab6.Circle;
import lab6.Square;
import lab6.LineSegment;
import lab6.Rectangle;

/**
 *
 * @author amrze
 */
public class Front extends javax.swing.JFrame implements DrawingEngine {

    /**
     * Creates new form Front
     */
    public Front() {
        initComponents();
        setupCanvas();

    }

    private void setupCanvas() {
        canvas = new JPanel() {
            @Override
            public void paintComponent(Graphics g) {
                super.paintComponent(g);
                refresh(g);
            }
        };
        canvas.setBackground(Color.WHITE);
        add(canvas);
        canvas.setBounds(400, 150, 500, 500);
        canvas.setVisible(true);
        setLayout(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        DrawPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        circleButton = new javax.swing.JButton();
        lineButton = new javax.swing.JButton();
        squareButton = new javax.swing.JButton();
        rectangleButton = new javax.swing.JButton();
        selectShapeMenu = new javax.swing.JComboBox<>();
        colorizeShapeButton = new javax.swing.JButton();
        deleteShapeButton = new javax.swing.JButton();
        ResizeButton = new javax.swing.JButton();
        MoveButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        LoadButton = new javax.swing.JButton();
        FilesPanel = new javax.swing.JPanel();
        jFileChooser1 = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Select Shape");

        circleButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        circleButton.setText("Circle");
        circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleButtonActionPerformed(evt);
            }
        });

        lineButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lineButton.setText("Line Segment");
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });

        squareButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        squareButton.setText("Square");
        squareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareButtonActionPerformed(evt);
            }
        });

        rectangleButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        rectangleButton.setText("Rectangle");
        rectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleButtonActionPerformed(evt);
            }
        });

        selectShapeMenu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Shape" }));

        colorizeShapeButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        colorizeShapeButton.setText("Colorize");
        colorizeShapeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeShapeButtonActionPerformed(evt);
            }
        });

        deleteShapeButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        deleteShapeButton.setText("Delete");
        deleteShapeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteShapeButtonActionPerformed(evt);
            }
        });

        ResizeButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        ResizeButton.setText("Resize");
        ResizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResizeButtonActionPerformed(evt);
            }
        });

        MoveButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        MoveButton.setText("Move");
        MoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveButtonActionPerformed(evt);
            }
        });

        SaveButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        LoadButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        LoadButton.setText("Load");
        LoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DrawPanelLayout = new javax.swing.GroupLayout(DrawPanel);
        DrawPanel.setLayout(DrawPanelLayout);
        DrawPanelLayout.setHorizontalGroup(
            DrawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DrawPanelLayout.createSequentialGroup()
                .addGroup(DrawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DrawPanelLayout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(circleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(squareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rectangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lineButton))
                    .addGroup(DrawPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DrawPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ResizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DrawPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(DrawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(DrawPanelLayout.createSequentialGroup()
                                .addComponent(colorizeShapeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteShapeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(selectShapeMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(DrawPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LoadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(223, Short.MAX_VALUE))
        );
        DrawPanelLayout.setVerticalGroup(
            DrawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DrawPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(DrawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(circleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(squareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rectangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectShapeMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(DrawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorizeShapeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteShapeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(DrawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ResizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67)
                .addGroup(DrawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LoadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(160, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab1", DrawPanel);

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FilesPanelLayout = new javax.swing.GroupLayout(FilesPanel);
        FilesPanel.setLayout(FilesPanelLayout);
        FilesPanelLayout.setHorizontalGroup(
            FilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FilesPanelLayout.createSequentialGroup()
                .addContainerGap(158, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );
        FilesPanelLayout.setVerticalGroup(
            FilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FilesPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(115, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab2", FilesPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadButtonActionPerformed

        loadfromFile();
        canvas.repaint();
// TODO add your handling code here:
    }//GEN-LAST:event_LoadButtonActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        addToFile(shapes);
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void MoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveButtonActionPerformed
        String selectedShapeName = (String) selectShapeMenu.getSelectedItem();
        for (Shape shape : shapes) {
            if (selectedShapeName.contains(shape.getClass().getSimpleName())) {
                int x = Integer.parseInt(JOptionPane.showInputDialog("Enter X position:"));
                int y = Integer.parseInt(JOptionPane.showInputDialog("Enter Y position:"));
                shape.setPosition(new Point(x, y));
                canvas.repaint();
                break;
            }
        }

    }//GEN-LAST:event_MoveButtonActionPerformed

    private void ResizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResizeButtonActionPerformed
        String selectedShapeName = (String) selectShapeMenu.getSelectedItem();
        for (Shape shape : shapes) {
            if (selectedShapeName.contains(shape.getClass().getSimpleName())) {
                if (selectedShapeName.contains("Circle")) {
                    int radius = Integer.parseInt(JOptionPane.showInputDialog("Enter radius:"));
                    Map<String, Double> properties = shape.getProperties();
                    properties.put("radius", (double)radius);
         
                } else if (selectedShapeName.contains("Rectangle")) {
                    int width = Integer.parseInt(JOptionPane.showInputDialog("Enter width:"));
                    int height = Integer.parseInt(JOptionPane.showInputDialog("Enter height:"));
                    Map<String, Double> properties = shape.getProperties();
                    properties.put("width", (double)width);
                    properties.put("height", (double)height);
                    
                } else if (selectedShapeName.contains("Square")) {

                    int size = Integer.parseInt(JOptionPane.showInputDialog("Enter length"));
                    Map<String, Double> properties = shape.getProperties();
                    properties.put("width", (double)size);
                    properties.put("height", (double)size);
                } else if (selectedShapeName.contains("LineSegment")) {
                    int x2 = Integer.parseInt(JOptionPane.showInputDialog("Enter X2 position:"));
                    int y2 = Integer.parseInt(JOptionPane.showInputDialog("Enter Y2 position:"));
                    Map<String, Double> properties = shape.getProperties();
                    properties.put("x2", (double)x2);
                    properties.put("y2", (double)y2);
               
                }

                canvas.repaint();
                break;
            }
        }
    }//GEN-LAST:event_ResizeButtonActionPerformed

    private void deleteShapeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteShapeButtonActionPerformed
        String selectedShapeName = (String) selectShapeMenu.getSelectedItem();
        for (Shape shape : shapes) {
            if (selectedShapeName.contains(shape.getClass().getSimpleName())) {
                shapes.remove(shape);
                selectShapeMenu.removeItem(selectedShapeName);
                canvas.repaint();
                break;
            }
        }
    }//GEN-LAST:event_deleteShapeButtonActionPerformed

    private void colorizeShapeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeShapeButtonActionPerformed
        String selectedShapeName = (String) selectShapeMenu.getSelectedItem();
        for (Shape shape : shapes) {
            if (selectedShapeName.contains(shape.getClass().getSimpleName())) {
                Color newColor = JColorChooser.showDialog(this, "Choose a color", shape.getFillColor());
                shape.setFillColor(newColor);
                canvas.repaint();
                break;
            }
        }
    }//GEN-LAST:event_colorizeShapeButtonActionPerformed

    private void rectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleButtonActionPerformed
        drawShape("rectangle");
    }//GEN-LAST:event_rectangleButtonActionPerformed

    private void squareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareButtonActionPerformed
        drawShape("Square");
    }//GEN-LAST:event_squareButtonActionPerformed

    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
        drawShape("line");
    }//GEN-LAST:event_lineButtonActionPerformed

    private void circleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleButtonActionPerformed

        drawShape("circle");
    }//GEN-LAST:event_circleButtonActionPerformed

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Front().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DrawPanel;
    private javax.swing.JPanel FilesPanel;
    private javax.swing.JButton LoadButton;
    private javax.swing.JButton MoveButton;
    private javax.swing.JButton ResizeButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton circleButton;
    private javax.swing.JButton colorizeShapeButton;
    private javax.swing.JButton deleteShapeButton;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton lineButton;
    private javax.swing.JButton rectangleButton;
    private javax.swing.JComboBox<String> selectShapeMenu;
    private javax.swing.JButton squareButton;
    // End of variables declaration//GEN-END:variables
    private ArrayList<Shape> shapes = new ArrayList<>();
    private JPanel canvas;

    @Override
    public void addShape(Shape shape) {
        shapes.add(shape);
        selectShapeMenu.addItem(shape.getClass().getSimpleName() + " " + shapes.size());
        canvas.repaint();
    }

    @Override
    public void removeShape(Shape shape) {
        shapes.remove(shape);
        selectShapeMenu.removeItem(shape.getClass().getSimpleName());
        canvas.repaint();
    }

    @Override
    public Shape[] getShapes() {
        return shapes.toArray(new Shape[0]);
    }

    @Override
    public void refresh(Graphics canvas) {
        for (int i = 0; i < shapes.size(); i++) {
            shapes.get(i).draw(canvas);
            shapes.get(i).colorize(canvas);
        }

    }

    public void drawShape(String shapeType) {
        try {
            Color newColor = JColorChooser.showDialog(this, "Choose a color", Color.RED);
            int x = Integer.parseInt(JOptionPane.showInputDialog("Enter X position:"));
            int y = Integer.parseInt(JOptionPane.showInputDialog("Enter Y position:"));
            if ("circle".equals(shapeType)) {
                int radius = Integer.parseInt(JOptionPane.showInputDialog("Enter radius:"));
                addShape(new Circle(x, y, radius, newColor, null));
            } else if ("rectangle".equals(shapeType)) {
                int width = Integer.parseInt(JOptionPane.showInputDialog("Enter width:"));
                int height = Integer.parseInt(JOptionPane.showInputDialog("Enter height:"));
                addShape(new Rectangle(x, y, height, width, newColor, null));
            } else if ("line".equals(shapeType)) {
                int x2 = Integer.parseInt(JOptionPane.showInputDialog("Enter X2 position:"));
                int y2 = Integer.parseInt(JOptionPane.showInputDialog("Enter Y2 position:"));
                addShape(new LineSegment(x, y, x2, y2, newColor));
            } else if ("Square".equals(shapeType)) {
                int size = Integer.parseInt(JOptionPane.showInputDialog("Enter length:"));
                addShape(new Square(x, y, size, size, newColor, null));
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "please enter an integer value", "Message", JOptionPane.ERROR_MESSAGE);

        }
    }

    public void addToFile(ArrayList<Shape> shapes) throws NullPointerException {

        if (shapes.isEmpty()) {
            JOptionPane.showMessageDialog(null, "There are no shapes to add", "Message", JOptionPane.ERROR_MESSAGE);
        } else {

            jTabbedPane1.setSelectedIndex(1);

            try {
                jFileChooser1.setCurrentDirectory(new File("."));
                int result = jFileChooser1.showOpenDialog(null);
                if (result == 0) {
                    File f = new File(jFileChooser1.getSelectedFile().getAbsolutePath());
                    FileWriter writer;
                    writer = new FileWriter(f);
                    for (Shape shape : shapes) {
                        writer.write(shape.toString());

                    }
                    writer.close();
                    JOptionPane.showMessageDialog(null, "Shapes saved successfully!", "Message", JOptionPane.INFORMATION_MESSAGE);

                    jTabbedPane1.setSelectedIndex(0);

                }

            } catch (IOException ex) {
                Logger.getLogger(Front.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    public void loadfromFile() {
        jTabbedPane1.setSelectedIndex(1);

        try {
            jFileChooser1.setCurrentDirectory(new File("."));
            int result = jFileChooser1.showOpenDialog(null);
            if (result == 0) {
                File f = new File(jFileChooser1.getSelectedFile().getAbsolutePath());
                FileReader reader = new FileReader(f);
                BufferedReader bufferedReader = new BufferedReader(reader);
                String line;

                while ((line = bufferedReader.readLine()) != null) {
                    String[] details = line.split(",");
                    String type = details[0];
                    int x = Integer.parseInt(details[1]);
                    int y = Integer.parseInt(details[2]);
                    Color color = new Color(Integer.parseInt(details[3]), Integer.parseInt(details[4]), Integer.parseInt(details[5]));
                    Color fillColor = null;

                    if (details.length > 7) {
                        fillColor = new Color(Integer.parseInt(details[6]), Integer.parseInt(details[7]), Integer.parseInt(details[8]));
                    }

                    switch (type) {
                        case "Circle":
                            double radius = Double.parseDouble(details[9]);
                            addShape(new Circle(x, y, radius, color, fillColor));

                            break;
                        case "Rectangle":
                            int width = Integer.parseInt(details[9]);
                            int height = Integer.parseInt(details[10]);
                            addShape(new Rectangle(x, y, width, height, color, fillColor));
                            break;
                        case "Square":
                            int size = Integer.parseInt(details[9]);
                            addShape(new Square(x, y, size, size, color, fillColor));
                            break;
                        case "LineSegment":
                            int x2 = Integer.parseInt(details[9]);
                            int y2 = Integer.parseInt(details[10]);
                            addShape(new LineSegment(x, y, x2, y2, color));
                            break;
                        default:
                            break;
                    }

                }

            }
        } catch (IOException ex) {
            Logger.getLogger(Front.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTabbedPane1.setSelectedIndex(0);

    }

}
